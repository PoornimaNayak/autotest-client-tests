pythontest.sh


==============================================================================
1. pythontest.sh: 				test standard/extended modules
2. pythontest.sh gdbm:				test python-gdbm
3. pythontest.sh xml:				test python-xml
4. manul test for tkinter package and python curses support:
==============================================================================

This test is a wrapper of Python 2.6 built-in regression testcases provided by the python-test package.
Test driver is regrtest.py. All tests found under /usr/lib*/python2.6/test are run with exception of those listed in the tests.exclude file. The excluded tests
were found to fail upstream and therefore not expected to pass on OS.

A.> The basic standard modules are verified by:
	test_grammar.py
	test_opcodes.py
	test_operations.py
	test_builtin.py
	test_exceptions.py
	test_types.py
other extended modules are also verified, please see file content of "tests.list".

Some tests are skipped as expected at runtime, as there's no such module installed in SUT.


B.> For the subpackages generated by Python source code:
	python-gdbm:	tested via test_gdbm

	python-xml:	tested via test_minidom, test_pyexpat, test_sax, test_xmllib, test_xmlrpc 

	curses support is now part of the base python package and tested via test_curses.py, but this test should be run from shell prompt,
				since it's tty related: ./regrtest.py -u curses test_curses
			and there are other tests in python-demo for curses.

	tkinter:	manual tests from python-demo
/usr/lib[64]/python2.6/Demo/tkinter
			or from /usr/lib[64]/python2.6/lib-tk, e.g. dialog, menu, canvas etc

	python-tools:	will not test, as it's only a reference/guide for python programmers,
			it doesn't introduce real functionality.



==============
Hints and tips
==============

1. How to run an individual test:
	1). export PYTHONPATH=/opt/fiv/.../testcases/fivextra/python
	   so that package "test" can be searched (in test_support.py)
	2). ./regrtest.py [-v] test_<tcname>

2. test_ioctl.py is skipped

   pan.c calls setpgrp() for the client process, so in test_ioctl.py:
      - os.getpgrp() point to the pan client process, i.e. pid of "pythontest.sh"
      - fcntl.ioctl(tty, termios.TIOCGPGRP, "    "): 
	get the process group id for processes associated with "/dev/tty", i.e. pid of "runfiv.sh"
   Therefore, test_ioctl.py is not appropriate to be run under pan, unless we remove invocation of setpgrp() in pan.c.

   Under ABAT, test_ioctl.py is just skipped since tty is not detected, that's why we overlooked the failure.

   Manual invocation of "./regrtest.py test_ioctl.py" can pass the test (workaround pan) or, 
   ssh -t localhost "cd /opt/fiv/ltp/testcases/fivextra/python/test; ./regrtest.py test_ioctl.py"


												-- rende
