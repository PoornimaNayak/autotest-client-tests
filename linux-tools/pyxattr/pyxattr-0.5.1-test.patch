--- tests/test_xattr.py.orig	2012-05-15 18:28:46.000000000 -0500
+++ tests/test_xattr.py	2013-12-17 04:05:24.532101194 -0600
@@ -74,7 +74,7 @@ class xattrTest(unittest.TestCase):
 
     def _checkDeprecated(self, item, symlink=False):
         """check deprecated list, set, get operations against an item"""
-        self.assertEqual(xattr.listxattr(item, symlink), [])
+        self.assertEqual(xattr.listxattr(item, symlink), ['security.selinux'])
         self.assertRaises(EnvironmentError, xattr.setxattr, item,
                           self.USER_ATTR, self.USER_VAL,
                           XATTR_REPLACE)
@@ -89,20 +89,20 @@ class xattrTest(unittest.TestCase):
             raise
         self.assertRaises(EnvironmentError, xattr.setxattr, item,
                           self.USER_ATTR, self.USER_VAL, XATTR_CREATE)
-        self.assertEqual(xattr.listxattr(item, symlink), [self.USER_ATTR])
+        self.assertEqual(xattr.listxattr(item, symlink), ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.getxattr(item, self.USER_ATTR, symlink),
                          self.USER_VAL)
         self.assertEqual(xattr.get_all(item, nofollow=symlink),
-                         [(self.USER_ATTR, self.USER_VAL)])
+                         [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         xattr.removexattr(item, self.USER_ATTR)
-        self.assertEqual(xattr.listxattr(item, symlink), [])
-        self.assertEqual(xattr.get_all(item, nofollow=symlink), [])
+        self.assertEqual(xattr.listxattr(item, symlink), ['security.selinux'])
+        self.assertEqual(xattr.get_all(item, nofollow=symlink), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         self.assertRaises(EnvironmentError, xattr.removexattr,
                           item, self.USER_ATTR)
 
     def _checkListSetGet(self, item, symlink=False, use_ns=False):
         """check list, set, get operations against an item"""
-        self.assertEqual(xattr.list(item, symlink), [])
+        self.assertEqual(xattr.list(item, symlink), ['security.selinux'])
         self.assertRaises(EnvironmentError, xattr.set, item,
                           self.USER_ATTR, self.USER_VAL, flags=XATTR_REPLACE)
         self.assertRaises(EnvironmentError, xattr.set, item,
@@ -129,10 +129,10 @@ class xattrTest(unittest.TestCase):
                           self.USER_NN, self.USER_VAL,
                           flags=XATTR_CREATE, namespace=NS_USER)
         self.assertEqual(xattr.list(item, nofollow=symlink),
-                         [self.USER_ATTR])
+                         ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.list(item, nofollow=symlink,
                                     namespace=EMPTY_NS),
-                         [self.USER_ATTR])
+                         ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.list(item, namespace=NS_USER, nofollow=symlink),
                          [self.USER_NN])
         self.assertEqual(xattr.get(item, self.USER_ATTR, nofollow=symlink),
@@ -140,7 +140,7 @@ class xattrTest(unittest.TestCase):
         self.assertEqual(xattr.get(item, self.USER_NN, nofollow=symlink,
                                    namespace=NS_USER), self.USER_VAL)
         self.assertEqual(xattr.get_all(item, nofollow=symlink),
-                         [(self.USER_ATTR, self.USER_VAL)])
+                         [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         self.assertEqual(xattr.get_all(item, nofollow=symlink,
                                        namespace=NS_USER),
                          [(self.USER_NN, self.USER_VAL)])
@@ -148,8 +148,8 @@ class xattrTest(unittest.TestCase):
             xattr.remove(item, self.USER_NN, namespace=NS_USER)
         else:
             xattr.remove(item, self.USER_ATTR)
-        self.assertEqual(xattr.list(item, symlink), [])
-        self.assertEqual(xattr.get_all(item, nofollow=symlink), [])
+        self.assertEqual(xattr.list(item, symlink), ['security.selinux'])
+        self.assertEqual(xattr.get_all(item, nofollow=symlink), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         self.assertRaises(EnvironmentError, xattr.remove,
                           item, self.USER_ATTR, nofollow=symlink)
         self.assertRaises(EnvironmentError, xattr.remove, item,
@@ -158,32 +158,32 @@ class xattrTest(unittest.TestCase):
     def testNoXattrDeprecated(self):
         """test no attributes (deprecated functions)"""
         fh, fname = self._getfile()
-        self.assertEqual(xattr.listxattr(fname), [])
-        self.assertEqual(xattr.get_all(fname), [])
+        self.assertEqual(xattr.listxattr(fname), ['security.selinux'])
+        self.assertEqual(xattr.get_all(fname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         dname = self._getdir()
-        self.assertEqual(xattr.listxattr(dname), [])
-        self.assertEqual(xattr.get_all(dname), [])
+        self.assertEqual(xattr.listxattr(dname), ['security.selinux'])
+        self.assertEqual(xattr.get_all(dname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         _, sname = self._getsymlink()
-        self.assertEqual(xattr.listxattr(sname, True), [])
-        self.assertEqual(xattr.get_all(sname, nofollow=True), [])
+        self.assertEqual(xattr.listxattr(sname, True), ['security.selinux'])
+        self.assertEqual(xattr.get_all(sname, nofollow=True), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
 
     def testNoXattr(self):
         """test no attributes"""
         fh, fname = self._getfile()
-        self.assertEqual(xattr.list(fname), [])
+        self.assertEqual(xattr.list(fname), ['security.selinux'])
         self.assertEqual(xattr.list(fname, namespace=NS_USER), [])
-        self.assertEqual(xattr.get_all(fname), [])
+        self.assertEqual(xattr.get_all(fname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         self.assertEqual(xattr.get_all(fname, namespace=NS_USER), [])
         dname = self._getdir()
-        self.assertEqual(xattr.list(dname), [])
+        self.assertEqual(xattr.list(dname), ['security.selinux'])
         self.assertEqual(xattr.list(dname, namespace=NS_USER), [])
-        self.assertEqual(xattr.get_all(dname), [])
+        self.assertEqual(xattr.get_all(dname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         self.assertEqual(xattr.get_all(dname, namespace=NS_USER), [])
         _, sname = self._getsymlink()
-        self.assertEqual(xattr.list(sname, nofollow=True), [])
+        self.assertEqual(xattr.list(sname, nofollow=True), ['security.selinux'])
         self.assertEqual(xattr.list(sname, nofollow=True,
                                         namespace=NS_USER), [])
-        self.assertEqual(xattr.get_all(sname, nofollow=True), [])
+        self.assertEqual(xattr.get_all(sname, nofollow=True), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00')])
         self.assertEqual(xattr.get_all(sname, nofollow=True,
                                            namespace=NS_USER), [])
 
@@ -232,31 +232,31 @@ class xattrTest(unittest.TestCase):
         """test mixed access to file (deprecated functions)"""
         fh, fname = self._getfile()
         fo = os.fdopen(fh)
-        self.assertEqual(xattr.listxattr(fname), [])
+        self.assertEqual(xattr.listxattr(fname), ['security.selinux'])
         xattr.setxattr(fname, self.USER_ATTR, self.USER_VAL)
-        self.assertEqual(xattr.listxattr(fh), [self.USER_ATTR])
+        self.assertEqual(xattr.listxattr(fh), ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.getxattr(fo, self.USER_ATTR), self.USER_VAL)
-        self.assertEqual(xattr.get_all(fo), [(self.USER_ATTR, self.USER_VAL)])
+        self.assertEqual(xattr.get_all(fo), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         self.assertEqual(xattr.get_all(fname),
-                         [(self.USER_ATTR, self.USER_VAL)])
+                         [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         fo.close()
 
     def testMixedAccess(self):
         """test mixed access to file"""
         fh, fname = self._getfile()
         fo = os.fdopen(fh)
-        self.assertEqual(xattr.list(fname), [])
+        self.assertEqual(xattr.list(fname), ['security.selinux'])
         xattr.set(fname, self.USER_ATTR, self.USER_VAL)
-        self.assertEqual(xattr.list(fh), [self.USER_ATTR])
+        self.assertEqual(xattr.list(fh), ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.list(fh, namespace=NS_USER), [self.USER_NN])
         self.assertEqual(xattr.get(fo, self.USER_ATTR), self.USER_VAL)
         self.assertEqual(xattr.get(fo, self.USER_NN, namespace=NS_USER),
                          self.USER_VAL)
-        self.assertEqual(xattr.get_all(fo), [(self.USER_ATTR, self.USER_VAL)])
+        self.assertEqual(xattr.get_all(fo), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         self.assertEqual(xattr.get_all(fo, namespace=NS_USER),
                          [(self.USER_NN, self.USER_VAL)])
         self.assertEqual(xattr.get_all(fname),
-                         [(self.USER_ATTR, self.USER_VAL)])
+                         [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
         self.assertEqual(xattr.get_all(fname, namespace=NS_USER),
                          [(self.USER_NN, self.USER_VAL)])
         fo.close()
@@ -279,8 +279,8 @@ class xattrTest(unittest.TestCase):
         self._checkDeprecated(sname, symlink=True)
         target, sname = self._getsymlink(dangling=False)
         xattr.setxattr(target, self.USER_ATTR, self.USER_VAL)
-        self.assertEqual(xattr.listxattr(target), [self.USER_ATTR])
-        self.assertEqual(xattr.listxattr(sname, True), [])
+        self.assertEqual(xattr.listxattr(target), ['security.selinux', self.USER_ATTR])
+        self.assertEqual(xattr.listxattr(sname, True), ['security.selinux'])
         self.assertRaises(EnvironmentError, xattr.removexattr, sname,
                           self.USER_ATTR, True)
         xattr.removexattr(sname, self.USER_ATTR, False)
@@ -293,8 +293,8 @@ class xattrTest(unittest.TestCase):
         self._checkListSetGet(sname, symlink=True, use_ns=True)
         target, sname = self._getsymlink(dangling=False)
         xattr.set(target, self.USER_ATTR, self.USER_VAL)
-        self.assertEqual(xattr.list(target), [self.USER_ATTR])
-        self.assertEqual(xattr.list(sname, nofollow=True), [])
+        self.assertEqual(xattr.list(target), ['security.selinux', self.USER_ATTR])
+        self.assertEqual(xattr.list(sname, nofollow=True), ['security.selinux'])
         self.assertRaises(EnvironmentError, xattr.remove, sname,
                           self.USER_ATTR, nofollow=True)
         xattr.remove(sname, self.USER_ATTR, nofollow=False)
@@ -307,9 +307,9 @@ class xattrTest(unittest.TestCase):
         if PY3K:
             BINVAL = BINVAL.encode()
         xattr.setxattr(fname, self.USER_ATTR, BINVAL)
-        self.assertEqual(xattr.listxattr(fname), [self.USER_ATTR])
+        self.assertEqual(xattr.listxattr(fname), ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.getxattr(fname, self.USER_ATTR), BINVAL)
-        self.assertEqual(xattr.get_all(fname), [(self.USER_ATTR, BINVAL)])
+        self.assertEqual(xattr.get_all(fname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, BINVAL)])
         xattr.removexattr(fname, self.USER_ATTR)
 
     def testBinaryPayload(self):
@@ -320,12 +320,12 @@ class xattrTest(unittest.TestCase):
         if PY3K:
             BINVAL = BINVAL.encode()
         xattr.set(fname, self.USER_ATTR, BINVAL)
-        self.assertEqual(xattr.list(fname), [self.USER_ATTR])
+        self.assertEqual(xattr.list(fname), ['security.selinux', self.USER_ATTR])
         self.assertEqual(xattr.list(fname, namespace=NS_USER), [self.USER_NN])
         self.assertEqual(xattr.get(fname, self.USER_ATTR), BINVAL)
         self.assertEqual(xattr.get(fname, self.USER_NN,
                                    namespace=NS_USER), BINVAL)
-        self.assertEqual(xattr.get_all(fname), [(self.USER_ATTR, BINVAL)])
+        self.assertEqual(xattr.get_all(fname), [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, BINVAL)])
         self.assertEqual(xattr.get_all(fname, namespace=NS_USER),
                          [(self.USER_NN, BINVAL)])
         xattr.remove(fname, self.USER_ATTR)
@@ -334,20 +334,20 @@ class xattrTest(unittest.TestCase):
         """test many ops (deprecated functions)"""
         fh, fname = self._getfile()
         xattr.setxattr(fh, self.USER_ATTR, self.USER_VAL)
-        VL = [self.USER_ATTR]
+        VL = ['security.selinux', self.USER_ATTR]
         for i in range(self.MANYOPS_COUNT):
             self.assertEqual(xattr.listxattr(fh), VL)
         for i in range(self.MANYOPS_COUNT):
             self.assertEqual(xattr.getxattr(fh, self.USER_ATTR), self.USER_VAL)
         for i in range(self.MANYOPS_COUNT):
             self.assertEqual(xattr.get_all(fh),
-                             [(self.USER_ATTR, self.USER_VAL)])
+                             [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
 
     def testManyOps(self):
         """test many ops"""
         fh, fname = self._getfile()
         xattr.set(fh, self.USER_ATTR, self.USER_VAL)
-        VL = [self.USER_ATTR]
+        VL = ['security.selinux', self.USER_ATTR]
         VN = [self.USER_NN]
         for i in range(self.MANYOPS_COUNT):
             self.assertEqual(xattr.list(fh), VL)
@@ -359,7 +359,7 @@ class xattrTest(unittest.TestCase):
                              self.USER_VAL)
         for i in range(self.MANYOPS_COUNT):
             self.assertEqual(xattr.get_all(fh),
-                             [(self.USER_ATTR, self.USER_VAL)])
+                             [('security.selinux', 'unconfined_u:object_r:usr_t:s0\x00'), (self.USER_ATTR, self.USER_VAL)])
             self.assertEqual(xattr.get_all(fh, namespace=NS_USER),
                              [(self.USER_NN, self.USER_VAL)])
 
